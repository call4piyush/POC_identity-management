# Licensed under the Apache License, Version 2.0 (the "License"); Copyright 2025 Piyush Joshi
name: E2E-Keycloak

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  e2e-keycloak:
    runs-on: ubuntu-latest
    services:
      keycloak:
        image: quay.io/keycloak/keycloak:25.0.4
        ports:
          - 8081:8081
        options: >-
          --health-cmd "curl -f http://localhost:8081/ || exit 1" 
          --health-interval 5s 
          --health-timeout 2s 
          --health-retries 60
          -e KC_HTTP_PORT=8081
          -e KEYCLOAK_ADMIN=admin
          -e KEYCLOAK_ADMIN_PASSWORD=admin
          -e KC_IMPORT_REALM_URI=file:///opt/keycloak/data/import/demo-realm.json
          -v ${{ github.workspace }}/keycloak/realms:/opt/keycloak/data/import
        env:
          KC_HTTP_PORT: 8081
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
          KC_IMPORT_REALM_URI: file:///opt/keycloak/data/import/demo-realm.json
      wiremock:
        image: wiremock/wiremock:3.5.4
        ports:
          - 8082:8080
        options: >-
          --health-cmd "curl -f http://localhost:8080/__admin/health || exit 1"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 30
          -e WIREMOCK_OPTIONS="--port 8080 --verbose"
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'maven'
      - name: Build jar
        run: mvn -B -ntp -DskipTests package
      - name: Build Docker image
        run: docker build -t poc-oauth-springboot:${{ github.sha }} .
      - name: Start Keycloak manually
        run: |
          docker run -d --name keycloak-manual \
            -p 8081:8081 \
            -e KC_HTTP_PORT=8081 \
            -e KEYCLOAK_ADMIN=admin \
            -e KEYCLOAK_ADMIN_PASSWORD=admin \
            -e KC_IMPORT_REALM_URI=file:///opt/keycloak/data/import/demo-realm.json \
            -v ${{ github.workspace }}/keycloak/realms:/opt/keycloak/data/import \
            quay.io/keycloak/keycloak:25.0.4 start-dev --import-realm
          
          # Wait for Keycloak to be ready
          for i in {1..60}; do
            if curl -sf http://localhost:8081/ || exit 1; then
              echo "Keycloak is ready"; break; fi
            sleep 5; done
      - name: Run app with Keycloak profile
        run: |
          docker run -d --name poc-oauth-kc -p 8086:8080 \
            -e SPRING_PROFILES_ACTIVE=keycloak \
            -e EXTERNAL_SERVICE_URL=http://host.docker.internal:8082 \
            --add-host=host.docker.internal:host-gateway \
            poc-oauth-springboot:${{ github.sha }}
      - name: Wait for app to be healthy
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:8086/actuator/health | grep '"status":"UP"' >/dev/null; then
              echo "App is UP"; exit 0; fi; sleep 2; done; echo "App did not become healthy"; docker logs poc-oauth-kc; exit 1
      - name: Setup WireMock stubs
        run: |
          # Mock external service endpoint
          curl -X POST http://localhost:8082/__admin/mappings \
            -H "Content-Type: application/json" \
            -d '{
              "request": {
                "method": "GET",
                "url": "/api/external/status"
              },
              "response": {
                "status": 200,
                "headers": {
                  "Content-Type": "application/json"
                },
                "jsonBody": {
                  "status": "UP",
                  "service": "external-mock"
                }
              }
            }'
          
          # Verify stub is created
          curl -f http://localhost:8082/__admin/mappings | jq '.mappings | length' | grep -q "1"
      - name: Test external service call
        run: |
          # Test the resilience endpoint that calls external service
          RESPONSE=$(curl -s http://localhost:8086/api/resilience/status)
          echo "Resilience response: $RESPONSE"
          echo "$RESPONSE" | grep -q "external-mock"
      - name: Obtain Keycloak token (Direct Access Grant)
        run: |
          TOKEN=$(curl -s -X POST "http://localhost:8081/realms/demo-realm/protocol/openid-connect/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=password&client_id=springboot-api&username=api-user&password=password" | sed -n 's/.*"access_token"[ ]*:[ ]*"\([^"]*\)".*/\1/p')
          if [ -z "$TOKEN" ]; then echo "Failed to get KC token"; exit 1; fi
          echo "TOKEN_LEN=${#TOKEN}" >> $GITHUB_ENV
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
      - name: E2E - Users API with KC token
        run: |
          test $TOKEN_LEN -gt 100
          CODE=$(curl -s -o /dev/null -w '%{http_code}' -X GET http://localhost:8086/api/users -H "Authorization: Bearer $TOKEN")
          test "$CODE" = "200"
      - name: Test circuit breaker with external service failure
        run: |
          # Stop WireMock to simulate external service failure
          docker stop wiremock
          
          # Test circuit breaker fallback
          RESPONSE=$(curl -s http://localhost:8086/api/resilience/status)
          echo "Circuit breaker response: $RESPONSE"
          echo "$RESPONSE" | grep -q "fallback"
          
          # Restart WireMock
          docker start wiremock
          sleep 5
      - name: Logs (on failure)
        if: failure()
        run: |
          docker logs poc-oauth-kc | tail -n 300
          docker logs wiremock | tail -n 100
          docker logs keycloak-manual | tail -n 100
      - name: Cleanup
        if: always()
        run: |
          docker rm -f poc-oauth-kc || true
          docker rm -f keycloak-manual || true


